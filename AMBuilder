# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

MMSPlugin.plugin_name = 'gc_status'
MMSPlugin.plugin_alias = 'gc_status'

for sdk_target in MMSPlugin.sdk_targets:
  sdk = sdk_target.sdk
  cxx = sdk_target.cxx

  binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

  if binary.compiler.family == 'gcc' or binary.compiler.family == 'clang':
    binary.compiler.cxxflags += ['--std=c++17']
  elif binary.compiler.family == 'msvc':
    binary.compiler.cxxflags += ['/std:c++20']

  if binary.compiler.family == 'clang':
    binary.compiler.cxxflags += ['-Wno-register']
    binary.compiler.cxxflags += ['-Wno-invalid-offsetof']

  binary.compiler.cxxincludes += [
    os.path.join(builder.sourcePath, 'cs2_sdk'),
    os.path.join(builder.sourcePath, 'utils'),
    os.path.join(sdk['path'], 'entity2'),
	os.path.join(sdk['path'], 'tier1'),
	os.path.join(sdk['path'], 'sdk', 'thirdparty', 'protobuf-3.21.8', 'src'),
    os.path.join(builder.sourcePath, 'vendor', 'funchook', 'include'),
  ]

  target_folder = 'Debug' if builder.options.debug else 'Release'

  if binary.compiler.target.platform == 'linux':
    binary.compiler.postlink += [
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', target_folder, 'libfunchook.a'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', target_folder, 'libdistorm.a'),
      os.path.join(sdk['path'], 'lib', 'linux64', 'release', 'libprotobuf.a'),
    ]
    binary.sources += ['utils/plat_unix.cpp']
  elif binary.compiler.target.platform == 'windows':
    binary.compiler.postlink += [
      os.path.join('psapi.lib'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', target_folder, 'funchook.lib'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', target_folder, 'distorm.lib'),
      os.path.join(sdk['path'], 'lib' ,'public', 'win64', '2015', 'libprotobuf.lib'),
    ]
    binary.sources += ['utils/plat_win.cpp']


  binary.sources += [
    'gc_status.cpp',
	'addresses.cpp'
  ]

  protoc_builder = builder.tools.Protoc(protoc = sdk_target.protoc, sources = [
    os.path.join(sdk['path'], 'common', 'network_connection.proto')
  ])
  protoc_builder.protoc.includes += [
    os.path.join(sdk['path'], 'common'),
  ]

  binary.custom = [protoc_builder]
	
  nodes = builder.Add(binary)
  MMSPlugin.binaries += [nodes]